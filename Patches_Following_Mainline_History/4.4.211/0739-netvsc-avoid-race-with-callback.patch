From 1dabe926a5876013477f2794472b85cdf25d1354 Mon Sep 17 00:00:00 2001
From: stephen hemminger <stephen@networkplumber.org>
Date: Thu, 16 Mar 2017 16:12:37 -0700
Subject: netvsc: avoid race with callback
Reply-To: joseph.salisbury@microsoft.com

Change the argument to channel callback from the channel pointer
to the internal data structure containing per-channel info.
This avoids any possible races when callback happens during
initialization and makes IRQ code simpler.

Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(backported from commit 6de38af611ca81a970965c06231cd2d5f30b2566)
Signed-off-by: Joseph Salisbury <joseph.salisbury@microsoft.com>
---
 drivers/net/hyperv/netvsc.c       | 22 +++++++++++++++++-----
 drivers/net/hyperv/rndis_filter.c | 19 +++++++++----------
 2 files changed, 26 insertions(+), 15 deletions(-)

diff --git a/drivers/net/hyperv/netvsc.c b/drivers/net/hyperv/netvsc.c
index c04e1112cb05..ce9609068abd 100644
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@ -1217,12 +1217,10 @@ void netvsc_channel_cb(void *context)
 {
 	struct netvsc_channel *nvchan = context;
 
-	if (napi_schedule_prep(&nvchan->napi)) {
-		/* disable interupts from host */
-		hv_begin_read(&nvchan->channel->inbound);
+	/* disable interupts from host */
+	hv_begin_read(&nvchan->channel->inbound);
 
-		__napi_schedule(&nvchan->napi);
-	}
+	napi_schedule(&nvchan->napi);
 }
 
 /*
@@ -1249,6 +1247,20 @@ struct netvsc_device *netvsc_device_add(struct hv_device *device,
 	 */
 	set_channel_read_mode(device->channel, HV_CALL_ISR);
 
+	/* Open the channel */
+	ret = vmbus_open(device->channel, ring_size * PAGE_SIZE,
+			 ring_size * PAGE_SIZE, NULL, 0,
+			 netvsc_channel_cb,
+			 net_device->chan_table);
+
+	if (ret != 0) {
+		netdev_err(ndev, "unable to open channel: %d\n", ret);
+		goto cleanup;
+	}
+
+	/* Channel is opened */
+	netdev_dbg(ndev, "hv_netvsc channel opened successfully\n");
+
 	/* If we're reopening the device we may have multiple queues, fill the
 	 * chn_table with the default channel to use it before subchannels are
 	 * opened.
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index 5339708f66fd..0c6252e901b6 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -1024,6 +1024,7 @@ static void netvsc_sc_open(struct vmbus_channel *new_sc)
 	struct netvsc_device *nvscdev;
 	u16 chn_index = new_sc->offermsg.offer.sub_channel_index;
 	struct netvsc_channel *nvchan;
+	unsigned long flags;
 	int ret;
 
 	/* This is safe because this callback only happens when
@@ -1034,22 +1035,20 @@ static void netvsc_sc_open(struct vmbus_channel *new_sc)
 		return;
 
 	nvchan = nvscdev->chan_table + chn_index;
+	nvchan->mrc.buf
+		= vzalloc(NETVSC_RECVSLOT_MAX * sizeof(struct recv_comp_data));
 
-	/* Because the device uses NAPI, all the interrupt batching and
-	 * control is done via Net softirq, not the channel handling
-	 */
-	set_channel_read_mode(new_sc, HV_CALL_ISR);
-
-	/* Set the channel before opening.*/
-	nvchan->channel = new_sc;
+	if (!nvchan->mrc.buf)
+		return;
 
 	ret = vmbus_open(new_sc, nvscdev->ring_size * PAGE_SIZE,
 			 nvscdev->ring_size * PAGE_SIZE, NULL, 0,
 			 netvsc_channel_cb, nvchan);
+
 	if (ret == 0)
-		napi_enable(&nvchan->napi);
-	else
-		netif_napi_del(&nvchan->napi);
+		nvchan->channel = new_sc;
+
+	napi_enable(&nvchan->napi);
 
 	atomic_inc(&nvscdev->open_chn);
 	wake_up(&nvscdev->subchan_open);
-- 
2.17.1

